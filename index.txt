import React, { Component } from 'react'

import './index.css'

export default class Wizard extends Component {

  constructor () {
    super ()
    this.state = {
      sections: [
        'Products and Services',
        'Customer Basic Details',
        'Verify Mobile/Email',
        'Take Photo',
        'Signature',
        'Regulatory Customer Information',
        'Sales and Marketing Information',
        'Account Information Details',
        'Review and Submit'
      ],
      activeNo: 1,
      arrowLocation: 35,
      arrowTargetLocations: [ 35, 145, 255, 365, 480, 585, 695, 805, 920 ]
    }
  }

  render() {
    return (
      <>
        <div className = 'wizard'>
          <div className = 'head'>
            {
              this.state.sections.map ((section, i) => {
                return (
                  <section className = { `${ this.state.activeNo === (i + 1) ? 'active' : '' }` } key = { i }>
                    <span className = 'no'>{ (i + 1) }</span>
                    <span className = 'text'>{ section }</span>
                  </section>
                )
              })
            }
            <span className = 'arrow' style = {{
              left: `${ this.state.arrowLocation }px`,
              transition: 'left .3s ease'
            }}></span>
          </div>
        </div>

        <div>
          <button type = 'button' onClick = { this.onPrev }>Previous</button>
          <button type = 'button' onClick = { this.onNext }>Next</button>
        </div>

      </>
    )
  }

  onPrev = () => {
    let activeNo = this.state.activeNo
    let arrowLocation = this.state.arrowLocation
    if (activeNo > 1) {
      activeNo = activeNo - 1
      arrowLocation = this.state.arrowTargetLocations[activeNo - 1]
    }
    this.setState ({ arrowLocation, activeNo })
  }

  onNext = () => {
    let activeNo = this.state.activeNo
    let arrowLocation = this.state.arrowLocation
    if (activeNo <= this.state.sections.length) {
      activeNo = activeNo + 1
      arrowLocation = this.state.arrowTargetLocations[activeNo - 1]
    }
    this.setState ({ arrowLocation, activeNo })
  }

}